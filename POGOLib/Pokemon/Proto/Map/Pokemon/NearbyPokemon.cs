// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Map/Pokemon/NearbyPokemon.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace POGOLib.Pokemon.Proto.Map.Pokemon {

  /// <summary>Holder for reflection information generated from Map/Pokemon/NearbyPokemon.proto</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class NearbyPokemonReflection {

    #region Descriptor
    /// <summary>File descriptor for Map/Pokemon/NearbyPokemon.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static NearbyPokemonReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch9NYXAvUG9rZW1vbi9OZWFyYnlQb2tlbW9uLnByb3RvEiFQT0dPTGliLlBv",
            "a2Vtb24uUHJvdG8uTWFwLlBva2Vtb24iUwoNTmVhcmJ5UG9rZW1vbhIVCg1Q",
            "b2tlZGV4TnVtYmVyGAEgASgFEhYKDkRpc3RhbmNlTWV0ZXJzGAIgASgFEhMK",
            "C0VuY291bnRlcklkGAMgASgFYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOLib.Pokemon.Proto.Map.Pokemon.NearbyPokemon), global::POGOLib.Pokemon.Proto.Map.Pokemon.NearbyPokemon.Parser, new[]{ "PokedexNumber", "DistanceMeters", "EncounterId" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NearbyPokemon : pb::IMessage<NearbyPokemon> {
    private static readonly pb::MessageParser<NearbyPokemon> _parser = new pb::MessageParser<NearbyPokemon>(() => new NearbyPokemon());
    public static pb::MessageParser<NearbyPokemon> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::POGOLib.Pokemon.Proto.Map.Pokemon.NearbyPokemonReflection.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public NearbyPokemon() {
      OnConstruction();
    }

    partial void OnConstruction();

    public NearbyPokemon(NearbyPokemon other) : this() {
      pokedexNumber_ = other.pokedexNumber_;
      distanceMeters_ = other.distanceMeters_;
      encounterId_ = other.encounterId_;
    }

    public NearbyPokemon Clone() {
      return new NearbyPokemon(this);
    }

    /// <summary>Field number for the "PokedexNumber" field.</summary>
    public const int PokedexNumberFieldNumber = 1;
    private int pokedexNumber_;
    public int PokedexNumber {
      get { return pokedexNumber_; }
      set {
        pokedexNumber_ = value;
      }
    }

    /// <summary>Field number for the "DistanceMeters" field.</summary>
    public const int DistanceMetersFieldNumber = 2;
    private int distanceMeters_;
    public int DistanceMeters {
      get { return distanceMeters_; }
      set {
        distanceMeters_ = value;
      }
    }

    /// <summary>Field number for the "EncounterId" field.</summary>
    public const int EncounterIdFieldNumber = 3;
    private int encounterId_;
    public int EncounterId {
      get { return encounterId_; }
      set {
        encounterId_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as NearbyPokemon);
    }

    public bool Equals(NearbyPokemon other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PokedexNumber != other.PokedexNumber) return false;
      if (DistanceMeters != other.DistanceMeters) return false;
      if (EncounterId != other.EncounterId) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (PokedexNumber != 0) hash ^= PokedexNumber.GetHashCode();
      if (DistanceMeters != 0) hash ^= DistanceMeters.GetHashCode();
      if (EncounterId != 0) hash ^= EncounterId.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (PokedexNumber != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PokedexNumber);
      }
      if (DistanceMeters != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(DistanceMeters);
      }
      if (EncounterId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(EncounterId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (PokedexNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PokedexNumber);
      }
      if (DistanceMeters != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DistanceMeters);
      }
      if (EncounterId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EncounterId);
      }
      return size;
    }

    public void MergeFrom(NearbyPokemon other) {
      if (other == null) {
        return;
      }
      if (other.PokedexNumber != 0) {
        PokedexNumber = other.PokedexNumber;
      }
      if (other.DistanceMeters != 0) {
        DistanceMeters = other.DistanceMeters;
      }
      if (other.EncounterId != 0) {
        EncounterId = other.EncounterId;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PokedexNumber = input.ReadInt32();
            break;
          }
          case 16: {
            DistanceMeters = input.ReadInt32();
            break;
          }
          case 24: {
            EncounterId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
