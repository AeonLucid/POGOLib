// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Map/Pokemon/MapPokemon.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace POGOLib.Pokemon.Proto.Map.Pokemon {

  /// <summary>Holder for reflection information generated from Map/Pokemon/MapPokemon.proto</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class MapPokemonReflection {

    #region Descriptor
    /// <summary>File descriptor for Map/Pokemon/MapPokemon.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MapPokemonReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChxNYXAvUG9rZW1vbi9NYXBQb2tlbW9uLnByb3RvEiFQT0dPTGliLlBva2Vt",
            "b24uUHJvdG8uTWFwLlBva2Vtb24ijQEKCk1hcFBva2Vtb24SFAoMU3Bhd25w",
            "b2ludElkGAEgASgFEhMKC0VuY291bnRlcklkGAIgASgFEhUKDVBva2VkZXhU",
            "eXBlSWQYAyABKAUSGAoQRXhwaXJhdGlvblRpbWVNcxgEIAEoBRIQCghMYXRp",
            "dHVkZRgFIAEoBRIRCglMb25naXR1ZGUYBiABKAViBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOLib.Pokemon.Proto.Map.Pokemon.MapPokemon), global::POGOLib.Pokemon.Proto.Map.Pokemon.MapPokemon.Parser, new[]{ "SpawnpointId", "EncounterId", "PokedexTypeId", "ExpirationTimeMs", "Latitude", "Longitude" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class MapPokemon : pb::IMessage<MapPokemon> {
    private static readonly pb::MessageParser<MapPokemon> _parser = new pb::MessageParser<MapPokemon>(() => new MapPokemon());
    public static pb::MessageParser<MapPokemon> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::POGOLib.Pokemon.Proto.Map.Pokemon.MapPokemonReflection.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public MapPokemon() {
      OnConstruction();
    }

    partial void OnConstruction();

    public MapPokemon(MapPokemon other) : this() {
      spawnpointId_ = other.spawnpointId_;
      encounterId_ = other.encounterId_;
      pokedexTypeId_ = other.pokedexTypeId_;
      expirationTimeMs_ = other.expirationTimeMs_;
      latitude_ = other.latitude_;
      longitude_ = other.longitude_;
    }

    public MapPokemon Clone() {
      return new MapPokemon(this);
    }

    /// <summary>Field number for the "SpawnpointId" field.</summary>
    public const int SpawnpointIdFieldNumber = 1;
    private int spawnpointId_;
    public int SpawnpointId {
      get { return spawnpointId_; }
      set {
        spawnpointId_ = value;
      }
    }

    /// <summary>Field number for the "EncounterId" field.</summary>
    public const int EncounterIdFieldNumber = 2;
    private int encounterId_;
    public int EncounterId {
      get { return encounterId_; }
      set {
        encounterId_ = value;
      }
    }

    /// <summary>Field number for the "PokedexTypeId" field.</summary>
    public const int PokedexTypeIdFieldNumber = 3;
    private int pokedexTypeId_;
    public int PokedexTypeId {
      get { return pokedexTypeId_; }
      set {
        pokedexTypeId_ = value;
      }
    }

    /// <summary>Field number for the "ExpirationTimeMs" field.</summary>
    public const int ExpirationTimeMsFieldNumber = 4;
    private int expirationTimeMs_;
    public int ExpirationTimeMs {
      get { return expirationTimeMs_; }
      set {
        expirationTimeMs_ = value;
      }
    }

    /// <summary>Field number for the "Latitude" field.</summary>
    public const int LatitudeFieldNumber = 5;
    private int latitude_;
    public int Latitude {
      get { return latitude_; }
      set {
        latitude_ = value;
      }
    }

    /// <summary>Field number for the "Longitude" field.</summary>
    public const int LongitudeFieldNumber = 6;
    private int longitude_;
    public int Longitude {
      get { return longitude_; }
      set {
        longitude_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as MapPokemon);
    }

    public bool Equals(MapPokemon other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SpawnpointId != other.SpawnpointId) return false;
      if (EncounterId != other.EncounterId) return false;
      if (PokedexTypeId != other.PokedexTypeId) return false;
      if (ExpirationTimeMs != other.ExpirationTimeMs) return false;
      if (Latitude != other.Latitude) return false;
      if (Longitude != other.Longitude) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (SpawnpointId != 0) hash ^= SpawnpointId.GetHashCode();
      if (EncounterId != 0) hash ^= EncounterId.GetHashCode();
      if (PokedexTypeId != 0) hash ^= PokedexTypeId.GetHashCode();
      if (ExpirationTimeMs != 0) hash ^= ExpirationTimeMs.GetHashCode();
      if (Latitude != 0) hash ^= Latitude.GetHashCode();
      if (Longitude != 0) hash ^= Longitude.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (SpawnpointId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SpawnpointId);
      }
      if (EncounterId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(EncounterId);
      }
      if (PokedexTypeId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PokedexTypeId);
      }
      if (ExpirationTimeMs != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ExpirationTimeMs);
      }
      if (Latitude != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Latitude);
      }
      if (Longitude != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Longitude);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (SpawnpointId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpawnpointId);
      }
      if (EncounterId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EncounterId);
      }
      if (PokedexTypeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PokedexTypeId);
      }
      if (ExpirationTimeMs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ExpirationTimeMs);
      }
      if (Latitude != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Latitude);
      }
      if (Longitude != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Longitude);
      }
      return size;
    }

    public void MergeFrom(MapPokemon other) {
      if (other == null) {
        return;
      }
      if (other.SpawnpointId != 0) {
        SpawnpointId = other.SpawnpointId;
      }
      if (other.EncounterId != 0) {
        EncounterId = other.EncounterId;
      }
      if (other.PokedexTypeId != 0) {
        PokedexTypeId = other.PokedexTypeId;
      }
      if (other.ExpirationTimeMs != 0) {
        ExpirationTimeMs = other.ExpirationTimeMs;
      }
      if (other.Latitude != 0) {
        Latitude = other.Latitude;
      }
      if (other.Longitude != 0) {
        Longitude = other.Longitude;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SpawnpointId = input.ReadInt32();
            break;
          }
          case 16: {
            EncounterId = input.ReadInt32();
            break;
          }
          case 24: {
            PokedexTypeId = input.ReadInt32();
            break;
          }
          case 32: {
            ExpirationTimeMs = input.ReadInt32();
            break;
          }
          case 40: {
            Latitude = input.ReadInt32();
            break;
          }
          case 48: {
            Longitude = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
